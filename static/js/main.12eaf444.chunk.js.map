{"version":3,"sources":["gitGifs.js","components/Form.js","components/Display.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["getGifs","url","a","fetch","then","res","json","data","gifs","i","length","push","src","images","downsized","alt","title","id","catch","error","console","Form","props","setGifs","onSubmit","e","preventDefault","query","target","value","log","reset","type","name","placeholder","Display","className","map","gif","Header","App","useState","useEffect","displayRandomGifs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QACO,SAAeA,EAAtB,kC,4CAAO,WAAuBC,GAAvB,SAAAC,EAAA,sEACUC,MAAMF,GACdG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKA,QAClBH,MAAK,SAAAG,GAEF,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC7BD,EAAKG,KAAK,CACNC,IAAKL,EAAKE,GAAGI,OAAOC,UAAUb,IAC9Bc,IAAKR,EAAKE,GAAGO,MACbC,GAAIV,EAAKE,GAAGQ,KAGpB,OAAOT,KAEVU,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,MAf/B,oF,iCC+BQE,MA9Bf,SAAcC,GAEV,IAAMC,EAAUD,EAAMC,QAkBtB,OACI,uBAAMC,SAjBV,SAAsBC,GAClBA,EAAEC,iBAEF,IAAIC,EAAQF,EAAEG,OAAF,YAAwBC,MACpCT,QAAQU,IAAIH,GAGZ3B,EAFO,0FAAsF2B,EAAtF,wCAGFvB,MAAK,SAAAI,GACFe,EAAQf,MAGhBiB,EAAEG,OAAOG,SAKT,UACI,8BACI,uBAAOC,KAAK,OAAOC,KAAK,cAAcC,YAAY,0BAEtD,wBAAQF,KAAK,SAAb,0BCNGG,MApBf,SAAiBb,GAEb,IAAMd,EAAOc,EAAMd,KACnB,OACI,qBAAK4B,UAAU,iBAAf,WAEQ5B,GAAQA,EAAK6B,KAAI,SAACC,GAClB,OACI,qBAEI1B,IAAK0B,EAAI1B,IACTG,IAAKuB,EAAIvB,KAFJuB,EAAIrB,UCAlBsB,MATf,WAEI,OACI,8BACI,mDC0BGC,MArBf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOjC,EAAP,KAAae,EAAb,KAOA,OALAmB,qBAAU,WACRC,EAAkBpB,KACjB,IAID,sBAAKa,UAAU,MAAf,UAEE,cAAC,EAAD,IAEA,cAAC,EAAD,CAAMb,QAASA,IAEf,cAAC,EAAD,CAASf,KAAMA,QAQfmC,EAAoB,SAACpB,GAEzBvB,EADuB,6HAEpBI,MAAK,SAAAI,GACJe,EAAQf,OCzBCoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.12eaf444.chunk.js","sourcesContent":["\r\nexport async function getGifs(url) {\r\n    return await fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => data.data)\r\n        .then(data => {\r\n            let gifs = [];\r\n            for (let i = 0; i < data.length; i++) {\r\n                gifs.push({\r\n                    src: data[i].images.downsized.url,\r\n                    alt: data[i].title,\r\n                    id: data[i].id\r\n                });\r\n            }\r\n            return gifs;\r\n        })\r\n        .catch(error => console.error(error));\r\n}\r\n","import { getGifs } from '../gitGifs';\r\n\r\nfunction Form(props) {\r\n\r\n    const setGifs = props.setGifs;\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let query = e.target['search_text'].value;\r\n        console.log(query);\r\n        let url = `https://api.giphy.com/v1/gifs/search?api_key=s94Y5aXMRGvgV909X5F0RCggf5xpzkMB&q=${query}&limit=25&offset=0&rating=g&lang=en`;\r\n\r\n        getGifs(url)\r\n            .then(gifs => {\r\n                setGifs(gifs);\r\n            })\r\n\r\n        e.target.reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <input type='text' name='search_text' placeholder='search giphy for...' />\r\n            </div>\r\n            <button type='submit'> Search </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","\r\nfunction Display(props) {\r\n\r\n    const gifs = props.gifs;\r\n    return (\r\n        <div className='grid-container'>\r\n\r\n            { !!gifs && gifs.map((gif) => {\r\n                return(\r\n                    <img \r\n                        key={gif.id}\r\n                        src={gif.src}\r\n                        alt={gif.alt}\r\n                    />\r\n                );\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","\r\nfunction Header(){\r\n\r\n    return(\r\n        <div>\r\n            <h2> Giphy Web App</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import './App.css';\nimport './styles/style.css';\n\nimport Form from './components/Form';\nimport Display from './components/Display';\nimport Header from './components/Header';\nimport { useState, useEffect } from 'react';\nimport { getGifs } from './gitGifs';\n\n\nfunction App() {\n  const [gifs, setGifs] = useState([]);\n\n  useEffect(() => {\n    displayRandomGifs(setGifs);\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n\n      <Header />\n\n      <Form setGifs={setGifs} />\n\n      <Display gifs={gifs} />\n\n    </div>\n  );\n}\n\nexport default App;\n\nconst displayRandomGifs = (setGifs) => {\n  const defaultGifsURL = 'https://api.giphy.com/v1/gifs/search?api_key=s94Y5aXMRGvgV909X5F0RCggf5xpzkMB&q=random&limit=25&offset=0&rating=g&lang=en';\n  getGifs(defaultGifsURL)\n    .then(gifs => {\n      setGifs(gifs);\n    })\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}